# -*- coding:utf-8 -*-import sys,os,os.path,time,struct,traceback,threading,datetime,calendar,stringfrom xml.dom import getDOMImplementationimport sqlite3import string,hashlibimport json,uuid,base64ENCRYPT_PUBKEY='''-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCWEMTdAPU6nPhBCfGaCJmN4oIQ/L9Qxjdm9csTqRMDJVR5pk0BNxVAruFFKPnvYKeWczx815TUBBdMTYkS3iuZWHoFEsoBu+LAgdr1ZXPiw0zKVTlG+tfEJQICiYClu0xniNhEY9oPO8kGKoP1wdX3GuYKdYOQLg4OzQWYE6sMxwIDAQAB-----END PUBLIC KEY-----'''ENCRYPT_PRIVKEY='''-----BEGIN RSA PRIVATE KEY-----MIICXAIBAAKBgQCWEMTdAPU6nPhBCfGaCJmN4oIQ/L9Qxjdm9csTqRMDJVR5pk0BNxVAruFFKPnvYKeWczx815TUBBdMTYkS3iuZWHoFEsoBu+LAgdr1ZXPiw0zKVTlG+tfEJQICiYClu0xniNhEY9oPO8kGKoP1wdX3GuYKdYOQLg4OzQWYE6sMxwIDAQABAoGBAIMYOyJmR9Tgc+89ZJaPlLVifwWgBvHld1i2uKWAOl+xKM7s/LBnEmXjYGAun8kCwuSn3tug6R8eQ8wgn/Kfq61/sEfTl7G07P/toUTR41hnmkESLsCj/DW+B45EqhJlVU5BInfhTKHo/GJHSJJM4qzGnFpvzboRcxJ+OWjkUoahAkEAuc2xgH4SZzkH3xp2v45xVKpJ+OXuGZdlctLy1+hKN1RtFoXrD8P8sDBNfFjJ0g9+3qIU31HcuvXnKk25MCJVBQJBAM7CnUeSXQ68MYhB9Ze2SShwWLSusgdPB1BOhWrWVguLblX8vibngFJDH4HsmZH+1qGQ2IoVrvIvnw22NhMTxFsCQAJYOSQw8xSAYLwM/nCeYIm7+GD+rcl+4pXXWZ8l3EHke9fr6rJxO7ARe/jUuf8/mM9AZlkHFGz7i2Y6Qtr7o+0CQDnI0kQKd8+CcSVvqb+4xkFzBJeaq063m4eqKkdtl6aqVS/a7xnYYVicQdYB1fmji0CkRqBw5u/wtzcR0ZMLVzkCQDYl+2GunTk3G+SeWxQdQKjggPmyHwiX9UYAOdJs5/vLvjARuaAJ87jZjS0jB48WPnRNITjbCn9MBncEB7asch4=-----END RSA PRIVATE KEY-----'''GCONFS={	'auth_public_keyfile':'public.rsa',    'auth_private_keyfile':'private.rsa'}def encrypt_des(key,text):	from Crypto.Cipher import DES	import base64	from Crypto import Random	#iv = Random.get_random_bytes(8)	des = DES.new(key, DES.MODE_ECB)	reminder = len(text)%8	if reminder ==0:  # pad 8 bytes		text+='\x08'*8	else:		text+=chr(8-reminder)* (8-reminder)	#text+=' '*(8-len(text)%8)	return des.encrypt(text)#return base64.encodestring(des.encrypt(text))def decrypt_des(key,text):	from Crypto.Cipher import DES	import base64	#	print key	des = DES.new(key, DES.MODE_ECB)	text = des.decrypt(text)	pad = ord(text[-1])	if pad == '\x08':		return text[:-8]	return text[:-pad]def rsa_generate():	from Crypto.PublicKey import RSA	from Crypto import Random	random_generator = Random.new().read	key = RSA.generate(1024, random_generator)	#print key.publickey().encrypt('123213213123213213',20)	public =  key.publickey().exportKey()	#print key.publickey().exportKey()	private = key.exportKey()	return public,privatedef rsa_encrypt(key,text):	'''		传入私钥key和待加密明文数据text		自动生成8字节长度随机密码P,用P将text进行des加密生成E,		用私钥key加密P生成P2		key - private key		text - orignal text		@return:  [P2+E]  RSA加密的des秘钥 + 加密的密文	'''	import uuid	from Crypto.PublicKey import RSA	deskey = hashlib.md5(uuid.uuid1().hex).hexdigest()[:8]	text = encrypt_des(deskey,text)	key = RSA.importKey(key)	r = key.encrypt(deskey,32)	return r[0]+text # 加密的key，和des加密的数据def rsa_decrypt(key,text):	from Crypto.PublicKey import RSA	try:		rsa = RSA.importKey(key)		deskey = text[:128]		text = text[128:]		deskey = rsa.decrypt(deskey)		return decrypt_des(deskey,text)	except:		return ''class Cipher:	def __init__(self):#		self.pubkey = pubkey#		self.privkey = privkey		pass	def encrypt(self,key,text):		return rsa_encrypt(key,text)	def decrypt(self,key,text):		return rsa_decrypt(key,text)	def enc(self,key,text):		return encrypt_des(key,text)	def dec(self,key,text):		return decrypt_des(key,text)	@staticmethod	def getCipher():		try:			cip = Cipher()			return cip		except:			traceback.print_exc()			return Nonedef encryptToken(d):	'''		用户信息转换为token	'''	token=''	try:		# d = json.dumps(user)#		f = open(GCONFS['auth_public_keyfile'],'r')#		pubkey = f.read()#		f.close()		pubkey = ENCRYPT_PUBKEY		# d = Cipher.getCipher().encrypt(pubkey,d)  #rsa encrpyt		token = base64.urlsafe_b64encode(d).strip()	#print 'token size:',len(token)	except:		print traceback.format_exc()		token = ''	return tokendef decryptToken(token):	user = None	try:#		f = open(GCONFS['auth_private_keyfile'],'r')#		privkey = f.read()#		f.close()		privkey = ENCRYPT_PRIVKEY		token = token.encode('utf-8')		user = base64.urlsafe_b64decode(token)		# d = Cipher.getCipher().decrypt(privkey,d) #rsa decrept		# user = json.loads(d)	except:		#print traceback.format_exc()		pass	return userdef encryptPassword(pwd):	'''		用户信息转换为token	'''	token=''	try:		# d = json.dumps(user)#		f = open(GCONFS['auth_public_keyfile'],'r')#		pubkey = f.read()#		f.close()		pubkey = ENCRYPT_PUBKEY		# d = Cipher.getCipher().encrypt(pubkey,d)  #rsa encrpyt		pwd = base64.urlsafe_b64encode(pwd).strip()	#print 'token size:',len(token)	except:		pass	return pwddef decryptPassword(pwd):	try:#		f = open(GCONFS['auth_private_keyfile'],'r')#		privkey = f.read()#		f.close()		privkey = ENCRYPT_PRIVKEY		#token = token.encode('utf-8')		#user = base64.urlsafe_b64decode(token)		d = Cipher.getCipher().decrypt(privkey,pwd) #rsa decrept		# user = json.loads(d)	except:		#print traceback.format_exc()		pass	return ddef encPassword(pwd):	try:		# k = des("DESCRYPT", CBC, "\0\0\0\0\0\0\0\0")		# d = k.encrypt(pwd)		# print "d= ",d		# pwd = d		pwd = base64.urlsafe_b64encode(pwd).strip()	except:		pass	return pwddef decPassword(pwd):	try:		# k = des("DESCRYPT", CBC, "\0\0\0\0\0\0\0\0")		# d = k.decrypt(pwd)		pwd = base64.urlsafe_b64decode(pwd).strip()	except:		pass	return pwdif __name__=='__main__':	pass